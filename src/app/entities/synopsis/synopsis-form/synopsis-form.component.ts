// File generated by Telosys Tools Generator ( version 3.0.0 ) - Date 2018-01-15 ( Time 16:52:43 )

// Modules imports
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit, ViewChild } from '@angular/core';

// Models and services imports
import { Synopsis } from './../synopsis.model';
import { SynopsisService } from './../services/synopsis.service';
import { Book } from './../../book/book.model';
import { BookService } from './../../book/services/book.service';
import * as _ from 'underscore';
import { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';

@Component({
  selector: 'app-synopsis-form',
  templateUrl: './synopsis-form.component.html',
  styleUrls: ['./synopsis-form.component.css']
})
export class SynopsisFormComponent implements OnInit {

  // HTTP status code
  readonly NOT_FOUND_ERROR = 404;
  readonly CONFLICT_ERROR = 409;
  readonly INTERNAL_SERVER_ERROR = 500;

  @ViewChild('deleteModal') deleteModal;

  private title = 'Synopsis Form';
  private synopsis: Synopsis;
  private form: FormGroup;
  private ids;

  private bsConfig: Partial<BsDatepickerConfig>;

  // Book Select
  private booksData: Book[];

  constructor(
    private _bookService: BookService,
    private _synopsisService: SynopsisService,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService) {

    this.bsConfig = Object.assign({}, { containerClass: 'theme-dark-blue' });
  }

  ngOnInit() {
    this.getIdFromRouteParams();
    this.fetchBooks();
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

  fetchBooks = () => {
    this._bookService.getAll().subscribe(
      (data: Book[]) => this.booksData = data,
      error => console.error(error));
  }

  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }
  }

  getNewForm = () => {
    return {
      bookId: ['', Validators.required ],
      synopsis: ['']
    };
  }

  load = () => {
    this._synopsisService.getSingle(this.ids).subscribe(
      (synopsis: Synopsis) => {
        this.synopsis = synopsis;
        this.form.setValue({
          bookId: synopsis.bookId,
          synopsis: synopsis.synopsis
        });
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  save = () => {
	// If we didn't get a synopsis, we are adding a synopsis
    if (!this.synopsis) {
      this.add();
    } else { // If we didn't get a synopsis, we are adding a synopsis
      this.update();
    }
  }

  add = () => {
    this._synopsisService.add(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', 'Synopsis added successfuly');
        this._router.navigate(['./synopsis-form', this.form.value.bookId]);
      },
      error => {
        if (error.status === this.CONFLICT_ERROR) {
          this._notificationService.error(error.statusText, 'Id already used in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
    this._synopsisService.update(<Synopsis>this.form.getRawValue(), this.ids).subscribe(
      result => this._notificationService.success('Success', 'Synopsis edited successfuly'),
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  openDeleteModal = () => {
    this.deleteModal.open();
  }

  confirmDelete = (): void => {
    // Call delete service
    this._synopsisService.delete(this.synopsis.bookId).subscribe(
      result => {
        this._router.navigate(['./synopsis-list']);

        this._notificationService.success(
          'Deleted',
          `The synopsis entry with the id(s)='${this.synopsis.bookId}' was deleted successfuly`);
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });

    this.deleteModal.close();
  }
}
