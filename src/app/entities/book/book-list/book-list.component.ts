// File generated by Telosys Tools Generator ( version 3.0.0 ) - Date 2018-01-15 ( Time 16:52:42 )

// Modules imports
import { Component, OnInit, ViewChild } from '@angular/core';
import { Router } from '@angular/router';

// Services imports
import { PagerService } from './../../../services/pager.service';
import { EmitterService } from './../../../services/emitter.service';
import { NotificationService } from './../../../services/notification.service';
import { BookService } from './../services/book.service';

// Models imports
import { Book } from '../book.model';

@Component({
  selector: 'app-book-list',
  templateUrl: './book-list.component.html',
  styleUrls: ['./book-list.component.css']
})
export class BookListComponent implements OnInit {

  @ViewChild('deleteModal') deleteModal;
  private idToDelete: number;

  private bookIdToDelete;

  private listOfBooks: Book[];
  private listId = 'BOOK_COMPONENT_LIST';

  private title = 'List of Books';

  // pager object
  private pager: any = {};
  // paged items
  private pagedItems: any[];

  constructor(
    private _bookService: BookService,
    private _router: Router,
    private _notificationService: NotificationService,
    private pagerService: PagerService) { }

  ngOnInit() {
    // On init get all Books
    this.getAllBooks();

    // Listen to the 'list' emitted event so as populate the model with the event payload
    // Refresh Book list
    EmitterService.get(this.listId).subscribe((data: Book[]) => this.getAllBooks());
  }

  /**
   * Get all Book using the service BookService
   */
  getAllBooks = (): void => {
    this._bookService.getAll().subscribe(
      (data: Book[]) => {
        this.listOfBooks = data;
        this.setPage(1);
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
    });
  }

  editBook = (id): void => {
    // Navigate to book form component
    this._router.navigate(['./book-form', id]);
  }

  openDeleteModal(id) {
    this.idToDelete = id;
    this.deleteModal.open();
  }

  confirmDelete() {
    this._bookService.delete(this.idToDelete).subscribe(
      result => {
        // Notify Book list to refresh
        EmitterService.get(this.listId).emit(result);

        this._notificationService.success(
          'Deleted',
          `The car book with the id='${this.idToDelete}' was deleted successfuly`);
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
      });

    this.deleteModal.close();
  }

  setPage(page: number) {
    if (page < 1 || page > this.pager.totalPages) {
      return;
    }

    // get pager object from service
    this.pager = this.pagerService.getPager(this.listOfBooks.length, page);

    // get current page of items
    this.pagedItems = this.listOfBooks.slice(this.pager.startIndex, this.pager.endIndex + 1);
  }
}
