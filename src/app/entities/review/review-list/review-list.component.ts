// File generated by Telosys Tools Generator ( version 3.0.0 ) - Date 2018-01-15 ( Time 16:52:43 )

// Modules imports
import { Component, OnInit, ViewChild } from '@angular/core';
import { Router } from '@angular/router';

// Services imports
import { PagerService } from './../../../services/pager.service';
import { EmitterService } from './../../../services/emitter.service';
import { NotificationService } from './../../../services/notification.service';
import { ReviewService } from './../services/review.service';

// Models imports
import { Review } from '../review.model';

@Component({
  selector: 'app-review-list',
  templateUrl: './review-list.component.html',
  styleUrls: ['./review-list.component.css']
})
export class ReviewListComponent implements OnInit {

  @ViewChild('deleteModal') deleteModal;
  private customerCodeToDelete: string;
  private bookIdToDelete: number;

  private reviewIdToDelete;

  private listOfReviews: Review[];
  private listId = 'REVIEW_COMPONENT_LIST';

  private title = 'List of Reviews';

  // pager object
  private pager: any = {};
  // paged items
  private pagedItems: any[];

  constructor(
    private _reviewService: ReviewService,
    private _router: Router,
    private _notificationService: NotificationService,
    private pagerService: PagerService) { }

  ngOnInit() {
    // On init get all Reviews
    this.getAllReviews();

    // Listen to the 'list' emitted event so as populate the model with the event payload
    // Refresh Review list
    EmitterService.get(this.listId).subscribe((data: Review[]) => this.getAllReviews());
  }

  /**
   * Get all Review using the service ReviewService
   */
  getAllReviews = (): void => {
    this._reviewService.getAll().subscribe(
      (data: Review[]) => {
        this.listOfReviews = data;
        this.setPage(1);
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
    });
  }

  editReview = (customerCode, bookId): void => {
    // Navigate to review form component
    this._router.navigate(['./review-form', customerCode, bookId]);
  }

  openDeleteModal(customerCode, bookId) {
    this.customerCodeToDelete = customerCode;
    this.bookIdToDelete = bookId;
    this.deleteModal.open();
  }

  confirmDelete() {
    this._reviewService.delete(this.customerCodeToDelete, this.bookIdToDelete).subscribe(
      result => {
        // Notify Review list to refresh
        EmitterService.get(this.listId).emit(result);

        this._notificationService.success(
          'Deleted',
          `The car review with the id='${this.customerCodeToDelete}, ${this.bookIdToDelete}' was deleted successfuly`);
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
      });

    this.deleteModal.close();
  }

  setPage(page: number) {
    if (page < 1 || page > this.pager.totalPages) {
      return;
    }

    // get pager object from service
    this.pager = this.pagerService.getPager(this.listOfReviews.length, page);

    // get current page of items
    this.pagedItems = this.listOfReviews.slice(this.pager.startIndex, this.pager.endIndex + 1);
  }
}
