// File generated by Telosys Tools Generator ( version 3.0.0 ) - Date 2018-01-15 ( Time 16:52:42 )

// Modules imports
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit, ViewChild } from '@angular/core';

// Models and services imports
import { Employee } from './../employee.model';
import { EmployeeService } from './../services/employee.service';
import { Shop } from './../../shop/shop.model';
import { ShopService } from './../../shop/services/shop.service';
import { Badge } from './../../badge/badge.model';
import { BadgeService } from './../../badge/services/badge.service';
import * as _ from 'underscore';
import { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';

@Component({
  selector: 'app-employee-form',
  templateUrl: './employee-form.component.html',
  styleUrls: ['./employee-form.component.css']
})
export class EmployeeFormComponent implements OnInit {

  // HTTP status code
  readonly NOT_FOUND_ERROR = 404;
  readonly CONFLICT_ERROR = 409;
  readonly INTERNAL_SERVER_ERROR = 500;

  @ViewChild('deleteModal') deleteModal;

  private title = 'Employee Form';
  private employee: Employee;
  private form: FormGroup;
  private ids;

  private bsConfig: Partial<BsDatepickerConfig>;

  // Shop Select
  private shopsData: Shop[];

  // Badge Select
  private badgesData: Badge[];

  constructor(
    private _shopService: ShopService,
    private _badgeService: BadgeService,
    private _employeeService: EmployeeService,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService) {

    this.bsConfig = Object.assign({}, { containerClass: 'theme-dark-blue' });
  }

  ngOnInit() {
    this.getIdFromRouteParams();
    this.fetchShops();
    this.fetchBadges();
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

  fetchShops = () => {
    this._shopService.getAll().subscribe(
      (data: Shop[]) => this.shopsData = data,
      error => console.error(error));
  }

  fetchBadges = () => {
    this._badgeService.getAll().subscribe(
      (data: Badge[]) => this.badgesData = data,
      error => console.error(error));
  }

  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }
  }

  getNewForm = () => {
    return {
      code: ['', Validators.required ],
      shopCode: ['', Validators.required ],
      firstName: [''],
      lastName: ['', Validators.required ],
      manager: [''],
      badgeNumber: [''],
      email: ['']
    };
  }

  load = () => {
    this._employeeService.getSingle(this.ids).subscribe(
      (employee: Employee) => {
        this.employee = employee;
        this.form.setValue({
          code: employee.code,
          shopCode: employee.shopCode,
          firstName: employee.firstName,
          lastName: employee.lastName,
          manager: employee.manager,
          badgeNumber: employee.badgeNumber,
          email: employee.email
        });
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  save = () => {
	// If we didn't get a employee, we are adding a employee
    if (!this.employee) {
      this.add();
    } else { // If we didn't get a employee, we are adding a employee
      this.update();
    }
  }

  add = () => {
    this._employeeService.add(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', 'Employee added successfuly');
        this._router.navigate(['./employee-form', this.form.value.code]);
      },
      error => {
        if (error.status === this.CONFLICT_ERROR) {
          this._notificationService.error(error.statusText, 'Id already used in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
    this._employeeService.update(<Employee>this.form.getRawValue(), this.ids).subscribe(
      result => this._notificationService.success('Success', 'Employee edited successfuly'),
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  openDeleteModal = () => {
    this.deleteModal.open();
  }

  confirmDelete = (): void => {
    // Call delete service
    this._employeeService.delete(this.employee.code).subscribe(
      result => {
        this._router.navigate(['./employee-list']);

        this._notificationService.success(
          'Deleted',
          `The employee entry with the id(s)='${this.employee.code}' was deleted successfuly`);
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });

    this.deleteModal.close();
  }
}
